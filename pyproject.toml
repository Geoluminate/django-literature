[tool.poetry]
name = "django-literature"
version = "0.1.7"
description = "A scientific literature management tool for Django"
authors = ["Sam Jennings <samuel.scott.jennings@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "literature"}]
homepage = "https://github.com/SSJenny90/django-literature"
keywords = ["django", "literature", "publications", "scientific", "research"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: Django :: 3.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
python-dateutil = "^2.8.2"
django-formset = "^1.3.8"
django-entangled = "^0.5.4"
django = "^5.0.4"
citeproc-py = "^0.6.0"
django-partial-date = "^1.3.2"
neapolitan = "^24.4"
django-select2 = "^8.1.2"
django-crispy-forms = "^2.2"
crispy-bootstrap5 = "^2024.2"
django-sortedm2m = "^3.1.1"
django-admin-sortable2 = "^2.2.1"
django-extra-views = "^0.14.0"
django-jsonform = "^2.22.0"
django-json-widget = "^2.0.1"
django-easy-icons = {git = "https://github.com/SamuelJennings/django-easy-icons"}
django-tables2 = "^2.7.0"
django-admin-extra-buttons = "^1.5.8"
django-extensions = "^3.2.3"
django-flex-menus = {git = "https://github.com/SamuelJennings/django-flex-menus"}


[tool.poetry.group.dev.dependencies]
black = "^23.1.0"
coverage = "^7.2.1"
deptry = "^0.8.0"
django-coverage-plugin = "^3.0.0"
django-stubs = "^1.15.0"
factory-boy = "^3.2.1"
geoluminate-docs = {git = "https://github.com/Geoluminate/geoluminate-docs.git"}
invoke = "^2.0.0"
ipython = "^8.20.0"
mypy = "^1.2.0"
pre-commit = "^3.2.2"
pylint-django = "^2.5.3"
pytest = "^7.2.2"
pytest-cov = "^4.0.0"
pytest-django = "^4.5.2"
pytest-sugar = "^0.9.7"
tox = "^4.4.6"
types-python-dateutil = "^2.8.19.12"
types-requests = "^2.28.11.17"
djlint = "^1.34.1"



[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 120
target-version = ['py37']
preview = true

[tool.mypy]
files = ["literature"]
disallow_untyped_defs = "False"
disallow_any_unimported = "False"
ignore_missing_imports = "True"
no_implicit_optional = "True"
check_untyped_defs = "False"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"
exclude = ["docs/","migrations/","tests/settings.py"]
mypy_path = "literature/"
plugins = ["mypy_django_plugin.main"]

[tool.django-stubs]
django_settings_module = "tests.settings"

[tool.ruff]
target-version = "py37"
exclude = ['docs/']
line-length = 120
fix = true


[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # ClassAttributesShouldBeAnnotated
    "RUF012",
]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tests.settings"
python_files = ["test_*.py", "*_test.py", "testing/python/*.py"]
filterwarnings = [
    "ignore",
    "default:::literature",
]


[tool.coverage.report]
skip_empty = true
omit = [
    "*site-packages*",
    "*tests*",
    "*.tox*",
    ]
show_missing = "true"

[tool.coverage.run]
branch = "true"
source = ["literature"]


[tool.deptry]
extend_exclude = [
    "tasks.py",
    "docs/"
]
ignore_transitive = [
    "toml",
]


[tool.tox]
legacy_tox_ini = """
[tox]
skipsdist = true
envlist = py38, py39, py310, py311

[gh-actions]
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311

[testenv]
passenv = PYTHON_VERSION
allowlist_externals = poetry
commands =
    poetry install --without docs
    pytest --doctest-modules tests --cov --cov-config=pyproject.toml --cov-report=xml
    mypy
"""
